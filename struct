1.package main

import (
	"fmt"
	"math"
)

type Circulo struct {
	raio float64
}

func calcularArea(circulo Circulo) float64 {
	area := math.Pi * circulo.raio * circulo.raio
	return area
}

func main() {
	circulo := Circulo{raio: 5}

	area := calcularArea(circulo)
	fmt.Printf("A área do círculo é: %.2f\n", area)
}

2.package main

import "fmt"

type Endereco struct {
	Rua     string
	Numero  int
	Cidade  string
	Estado  string
}

type Pessoa struct {
	Nome     string
	Idade    int
	Endereco Endereco
}

func imprimirEnderecoCompleto(pessoa Pessoa) {
	endereco := pessoa.Endereco
	fmt.Printf("Endereço completo de %s:\n", pessoa.Nome)
	fmt.Printf("Rua: %s, %d\n", endereco.Rua, endereco.Numero)
	fmt.Printf("Cidade: %s\n", endereco.Cidade)
	fmt.Printf("Estado: %s\n", endereco.Estado)
}

func main() {
	pessoa := Pessoa{
		Nome:  "João",
		Idade: 30,
		Endereco: Endereco{
			Rua:     "Rua A",
			Numero:  123,
			Cidade:  "São Paulo",
			Estado:  "SP",
		},
	}

	imprimirEnderecoCompleto(pessoa)
}

3.package main

import "fmt"

type Triangulo struct {
	Base   float64
	Altura float64
}

func calcularArea(triangulo Triangulo) float64 {
	area := (triangulo.Base * triangulo.Altura) / 2
	return area
}

func main() {
	triangulo := Triangulo{
		Base:   6.0,
		Altura: 4.0,
	}

	area := calcularArea(triangulo)
	fmt.Printf("A área do triângulo é: %.2f\n", area)
}

4.package main

import (
	"fmt"
	"time"
)

type Musica struct {
	Titulo   string
	Artista  string
	Duracao  time.Duration
}

type Playlist struct {
	Nome     string
	Musicas  []Musica
}

func imprimirPlaylist(playlist Playlist) {
	fmt.Printf("Playlist: %s\n", playlist.Nome)

	var duracaoTotal time.Duration

	for _, musica := range playlist.Musicas {
		fmt.Printf("- Título: %s\n", musica.Titulo)
		fmt.Printf("  Artista: %s\n", musica.Artista)
		fmt.Printf("  Duração: %s\n", musica.Duracao)

		duracaoTotal += musica.Duracao
	}

	fmt.Printf("Tempo total da playlist: %s\n", duracaoTotal)
}

func main() {
	musicas := []Musica{
		{
			Titulo:  "Música 1",
			Artista: "Artista 1",
			Duracao: time.Minute * 3 + time.Second * 30,
		},
		{
			Titulo:  "Música 2",
			Artista: "Artista 2",
			Duracao: time.Minute * 4 + time.Second * 15,
		},
		{
			Titulo:  "Música 3",
			Artista: "Artista 3",
			Duracao: time.Minute * 2 + time.Second * 45,
		},
	}

	playlist := Playlist{
		Nome:    "Minha Playlist",
		Musicas: musicas,
	}

	imprimirPlaylist(playlist)
}

5.Playlist: Minha Playlist
- Título: Música 1
  Artista: Artista 1
  Duração: 3m30s
- Título: Música 2
  Artista: Artista 2
  Duração: 4m15s
- Título: Música 3
  Artista:

6.package main

import "fmt"

type Musica struct {
	Titulo   string
	Artista  string
	Duracao  string
}

type Playlist struct {
	Nome     string
	Musicas  []Musica
}

func buscarPlaylistsPorTitulo(titulo string, playlists []Playlist) []Playlist {
	var playlistsEncontradas []Playlist

	for _, playlist := range playlists {
		for _, musica := range playlist.Musicas {
			if musica.Titulo == titulo {
				playlistsEncontradas = append(playlistsEncontradas, playlist)
				break
			}
		}
	}

	return playlistsEncontradas
}

func main() {
	playlist1 := Playlist{
		Nome: "Playlist 1",
		Musicas: []Musica{
			{
				Titulo:  "Música 1",
				Artista: "Artista 1",
				Duracao: "3m30s",
			},
			{
				Titulo:  "Música 2",
				Artista: "Artista 2",
				Duracao: "4m15s",
			},
		},
	}

	playlist2 := Playlist{
		Nome: "Playlist 2",
		Musicas: []Musica{
			{
				Titulo:  "Música 3",
				Artista: "Artista 3",
				Duracao: "2m45s",
			},
			{
				Titulo:  "Música 4",
				Artista: "Artista 4",
				Duracao: "3m50s",
			},
		},
	}

	playlists := []Playlist{playlist1, playlist2}

	tituloBuscado := "Música 2"
	playlistsEncontradas := buscarPlaylistsPorTitulo(tituloBuscado, playlists)

	fmt.Printf("Playlists com o título '%s':\n", tituloBuscado)
	for _, playlist := range playlistsEncontradas {
		fmt.Println("- " + playlist.Nome)
	}
}

7.package main

import (
	"fmt"
	"time"
)

type Funcionario struct {
	Nome    string
	Salario float64
	Idade   int
}

func (f *Funcionario) AumentarSalario(porcentagem float64) {
	aumento := f.Salario * (porcentagem / 100)
	f.Salario += aumento
}

func (f *Funcionario) DiminuirSalario(porcentagem float64) {
	reducao := f.Salario * (porcentagem / 100)
	f.Salario -= reducao
}

func (f *Funcionario) TempoServico() int {
	idadeInicioTrabalho := 18
	idadeAtual := time.Now().Year() - f.Idade
	tempoServico := idadeAtual - idadeInicioTrabalho
	return tempoServico
}

func main() {
	funcionario := Funcionario{
		Nome:    "João",
		Salario: 5000,
		Idade:   25,
	}

	fmt.Println("Salário atual:", funcionario.Salario)
	funcionario.AumentarSalario(10)
	fmt.Println("Salário após aumento:", funcionario.Salario)

	funcionario.DiminuirSalario(5)
	fmt.Println("Salário após redução:", funcionario.Salario)

	tempoServico := funcionario.TempoServico()
	fmt.Println("Tempo de serviço:", tempoServico, "anos")
}

8.package main

import "fmt"

type Animal struct {
	Nome    string
	Especie string
	Idade   int
	Som     string
}

func (a *Animal) AlterarSom(novoSom string) {
	a.Som = novoSom
}

func (a Animal) ImprimirInformacoes() {
	fmt.Printf("Nome: %s\n", a.Nome)
	fmt.Printf("Espécie: %s\n", a.Especie)
	fmt.Printf("Idade: %d\n", a.Idade)
	fmt.Printf("Som: %s\n", a.Som)
}

func main() {
	animal := Animal{
		Nome:    "Rex",
		Especie: "Cachorro",
		Idade:   5,
		Som:     "Au Au",
	}

	animal.AlterarSom("Woof Woof")
	animal.ImprimirInformacoes()
}

9.package main

import (
	"fmt"
)

type Aluno struct {
	Nome  string
	Idade int
	Notas []float64
}

func (a *Aluno) AdicionarNota(nota float64) {
	a.Notas = append(a.Notas, nota)
}

func (a *Aluno) RemoverNota(index int) {
	if index >= 0 && index < len(a.Notas) {
		a.Notas = append(a.Notas[:index], a.Notas[index+1:]...)
	}
}

func (a Aluno) CalcularMedia() float64 {
	total := 0.0
	for _, nota := range a.Notas {
		total += nota
	}
	media := total / float64(len(a.Notas))
	return media
}

func (a Aluno) ImprimirInformacoes() {
	fmt.Printf("Nome: %s\n", a.Nome)
	fmt.Printf("Idade: %d\n", a.Idade)
	fmt.Printf("Média das notas: %.2f\n", a.CalcularMedia())
}

func main() {
	aluno := Aluno{
		Nome:  "João",
		Idade: 20,
		Notas: []float64{7.5, 8.0, 6.5},
	}

	aluno.AdicionarNota(9.0)
	aluno.RemoverNota(1)

	aluno.ImprimirInformacoes()
}

10.package main

import (
	"fmt"
)

type Filme struct {
	Titulo     string
	Diretor    string
	Ano        int
	Avaliacoes []int
}

func (f *Filme) AdicionarAvaliacao(avaliacao int) {
	f.Avaliacoes = append(f.Avaliacoes, avaliacao)
}

func (f *Filme) RemoverAvaliacao(index int) {
	if index >= 0 && index < len(f.Avaliacoes) {
		f.Avaliacoes = append(f.Avaliacoes[:index], f.Avaliacoes[index+1:]...)
	}
}

func (f Filme) CalcularMediaAvaliacoes() float64 {
	total := 0
	for _, avaliacao := range f.Avaliacoes {
		total += avaliacao
	}
	media := float64(total) / float64(len(f.Avaliacoes))
	return media
}

func (f Filme) ImprimirInformacoes() {
	fmt.Printf("Título: %s\n", f.Titulo)
	fmt.Printf("Diretor: %s\n", f.Diretor)
	fmt.Printf("Ano: %d\n", f.Ano)
	fmt.Printf("Média das avaliações: %.2f\n", f.CalcularMediaAvaliacoes())
}

func main() {
	filme := Filme{
		Titulo:     "Pulp Fiction",
		Diretor:    "Quentin Tarantino",
		Ano:        1994,
		Avaliacoes: []int{5, 4, 4, 5, 3},
	}

	filme.AdicionarAvaliacao(4)
	filme.RemoverAvaliacao(2)

	filme.ImprimirInformacoes()
}
